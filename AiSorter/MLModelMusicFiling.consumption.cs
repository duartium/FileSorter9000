// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace Mp3Mangler
{
    public partial class MLModelMusicFiling
    {
        /// <summary>
        /// model input class for MLModelMusicFiling.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"TagTypes")]
            public string TagTypes { get; set; }

            [ColumnName(@"Title")]
            public string Title { get; set; }

            [ColumnName(@"TitleSort")]
            public string TitleSort { get; set; }

            [ColumnName(@"Album")]
            public string Album { get; set; }

            [ColumnName(@"AlbumSort")]
            public string AlbumSort { get; set; }

            [ColumnName(@"Comment")]
            public string Comment { get; set; }

            [ColumnName(@"Year")]
            public string Year { get; set; }

            [ColumnName(@"Track")]
            public string Track { get; set; }

            [ColumnName(@"TrackCount")]
            public string TrackCount { get; set; }

            [ColumnName(@"Disc")]
            public string Disc { get; set; }

            [ColumnName(@"DiscCount")]
            public string DiscCount { get; set; }

            [ColumnName(@"Lyrics")]
            public string Lyrics { get; set; }

            [ColumnName(@"Grouping")]
            public string Grouping { get; set; }

            [ColumnName(@"BeatsPerMinute")]
            public string BeatsPerMinute { get; set; }

            [ColumnName(@"Conductor")]
            public string Conductor { get; set; }

            [ColumnName(@"Copyright")]
            public string Copyright { get; set; }

            [ColumnName(@"MusicBrainzArtistId")]
            public string MusicBrainzArtistId { get; set; }

            [ColumnName(@"MusicBrainzReleaseId")]
            public string MusicBrainzReleaseId { get; set; }

            [ColumnName(@"MusicBrainzReleaseArtistId")]
            public string MusicBrainzReleaseArtistId { get; set; }

            [ColumnName(@"MusicBrainzTrackId")]
            public string MusicBrainzTrackId { get; set; }

            [ColumnName(@"MusicBrainzDiscId")]
            public string MusicBrainzDiscId { get; set; }

            [ColumnName(@"MusicIpId")]
            public string MusicIpId { get; set; }

            [ColumnName(@"AmazonId")]
            public string AmazonId { get; set; }

            [ColumnName(@"MusicBrainzReleaseStatus")]
            public string MusicBrainzReleaseStatus { get; set; }

            [ColumnName(@"MusicBrainzReleaseType")]
            public string MusicBrainzReleaseType { get; set; }

            [ColumnName(@"MusicBrainzReleaseCountry")]
            public string MusicBrainzReleaseCountry { get; set; }

            [ColumnName(@"FirstArtist")]
            public string FirstArtist { get; set; }

            [ColumnName(@"FirstAlbumArtist")]
            public string FirstAlbumArtist { get; set; }

            [ColumnName(@"FirstAlbumArtistSort")]
            public string FirstAlbumArtistSort { get; set; }

            [ColumnName(@"FirstPerformer")]
            public string FirstPerformer { get; set; }

            [ColumnName(@"FirstPerformerSort")]
            public string FirstPerformerSort { get; set; }

            [ColumnName(@"FirstComposerSort")]
            public string FirstComposerSort { get; set; }

            [ColumnName(@"FirstComposer")]
            public string FirstComposer { get; set; }

            [ColumnName(@"FirstGenre")]
            public string FirstGenre { get; set; }

            [ColumnName(@"JoinedArtists")]
            public string JoinedArtists { get; set; }

            [ColumnName(@"JoinedAlbumArtists")]
            public string JoinedAlbumArtists { get; set; }

            [ColumnName(@"JoinedPerformers")]
            public string JoinedPerformers { get; set; }

            [ColumnName(@"JoinedPerformersSort")]
            public string JoinedPerformersSort { get; set; }

            [ColumnName(@"JoinedComposers")]
            public string JoinedComposers { get; set; }

            [ColumnName(@"JoinedGenres")]
            public string JoinedGenres { get; set; }

            [ColumnName(@"IsEmpty")]
            public string IsEmpty { get; set; }

            [ColumnName(@"FilePath")]
            public string FilePath { get; set; }

            [ColumnName(@"FileSize")]
            public string FileSize { get; set; }

            [ColumnName(@"CreateDate")]
            public string CreateDate { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for MLModelMusicFiling.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName("PredictedLabel")]
            public string Prediction { get; set; }

            public float[] Score { get; set; }
        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("MLModelMusicFiling.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
